name: Backend Workflow

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '_docker/app/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout
        uses: actions/checkout@v4

      # 3. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # 4. Setup Python for awscli
      - name: Setup Python for AWS CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install AWS CLI
        run: pip install awscli

      # 5. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 6. Build, tag, and push DRF image to Amazon ECR
      - name: Build, tag, and push DRF image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: emocare
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . \
            --platform linux/x86_64 \
            -f _docker/app/Dockerfile \
            --build-arg STAGE=prod \
            --build-arg AWS_REGION=ap-northeast-1 \
            --build-arg AWS_SECRET_NAME=${{ secrets.AWS_SECRET_NAME }} \
            --build-arg CLIENT_HOST=${{ secrets.CLIENT_HOST }} \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            --build-arg DB_USER=${{ secrets.DB_USER }} \
            --build-arg DB_PASS=${{ secrets.DB_PASS }} \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg CACHELOCATION=${{ secrets.CACHELOCATION }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get the ASG name
        run: |
          ECS_CLUSTER_NAME=emocareCluster
          CAPACITY_PROVIDER_NAME=$(aws ecs describe-clusters --clusters $ECS_CLUSTER_NAME --include ATTACHMENTS --query 'clusters[0].capacityProviders[0]' --output text)
          AUTO_SCALING_GROUP_ARN=$(aws ecs describe-capacity-providers --capacity-providers $CAPACITY_PROVIDER_NAME --query 'capacityProviders[0].autoScalingGroupProvider.autoScalingGroupArn' --output text)
          AUTO_SCALING_GROUP_NAME=$(basename $AUTO_SCALING_GROUP_ARN)
          echo "ASG_NAME=$AUTO_SCALING_GROUP_NAME" >> $GITHUB_ENV

      - name: Scale up the ASG
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --min-size 2 --desired-capacity 2

      - name: Deploy to Amazon ECS service
        run: |
          aws ecs update-service \
            --cluster emocareCluster \
            --service emocareService \
            --force-new-deployment
      - name: Wait for the deployment to finish
        run: |
          aws ecs wait services-stable \
            --cluster emocareCluster \
            --services emocareService

      - name: Scale down the ASG
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --min-size 1 --desired-capacity 1